[gd_scene load_steps=5 format=3 uid="uid://d3hqw75lpye41"]

[ext_resource type="Texture2D" uid="uid://0ii0g4nqe5qr" path="res://icon.svg" id="1_fj7yv"]
[ext_resource type="Texture2D" uid="uid://cv3u2m3cn3dej" path="res://Tomato_PNG_Clipart_Picture.png" id="2_tlwt5"]
[ext_resource type="Texture2D" uid="uid://sau20glfdy8f" path="res://free-target-and-goal-icon-2852-thumb.png" id="3_tlwt5"]

[sub_resource type="GDScript" id="GDScript_aqk2v"]
resource_name = "bot.gd"
script/source = "extends Node2D
# Implements the agent model from the slides:
#   see   : E -> Per
#   next  : I x Per -> I
#   action: I -> Ac

enum Act { MOVE_TO_ITEM, PICK, MOVE_TO_GOAL, DROP, NONE }

@export var speed := 120.0
@export var stop_distance := 8.0

@export var item_path: NodePath
@export var goal_path: NodePath

var item: Node2D
var goal: Node2D

# Internal state I
var I = {
	\"carrying\": false,
	\"target\": Vector2.ZERO,
}

func _ready() -> void:
	# Resolve references
	if item_path != NodePath():
		item = get_node_or_null(item_path)
	else:
		item = get_parent().get_node_or_null(\"Item\")

	if goal_path != NodePath():
		goal = get_node_or_null(goal_path)
	else:
		goal = get_parent().get_node_or_null(\"Goal\")

	if item == null or goal == null:
		push_error(\"Bot: assign item_path/goal_path or name nodes 'Item'/'Goal'.\")
		set_process(false)
		return

	I.target = item.position
	print(\"Bot ready. item=\", item.position, \" goal=\", goal.position)

func _process(delta: float) -> void:
	var per = see()
	next(I, per)
	var a: Act = action(I)
	act(a, delta)

# -------- agent functions ----------
func see() -> Dictionary:
	return {
		\"bot_pos\": position,
		\"item_pos\": item.position,
		\"goal_pos\": goal.position,
		\"near_item\": position.distance_to(item.position) <= stop_distance,
		\"near_goal\": position.distance_to(goal.position) <= stop_distance,
	}

func next(state: Dictionary, per: Dictionary) -> void:
	if state.carrying:
		state.target = per.goal_pos
	else:
		state.target = per.item_pos

func action(state: Dictionary) -> Act:
	var near_item := position.distance_to(item.position) <= stop_distance
	var near_goal := position.distance_to(goal.position) <= stop_distance

	if not state.carrying and near_item:
		return Act.PICK
	if state.carrying and near_goal:
		return Act.DROP
	# Correct GDScript ternary:
	return Act.MOVE_TO_GOAL if state.carrying else Act.MOVE_TO_ITEM

func act(a: Act, delta: float) -> void:
	match a:
		Act.MOVE_TO_ITEM, Act.MOVE_TO_GOAL:
			_move_towards(I.target, delta)
		Act.PICK:
			_pick_item()
		Act.DROP:
			_drop_item()
		Act.NONE:
			pass

# -------- helpers ----------
func _move_towards(target: Vector2, delta: float) -> void:
	var to_target := target - position
	if to_target.length() <= stop_distance:
		return
	var step := to_target.normalized() * speed * delta
	if step.length() >= to_target.length():
		position = target
	else:
		position += step

func _pick_item() -> void:
	I.carrying = true
	item.visible = false

func _drop_item() -> void:
	I.carrying = false
	item.position = goal.position + Vector2(0, -6)
	item.visible = true
"

[node name="World" type="Node2D"]
position = Vector2(11, 23)

[node name="Bot" type="CharacterBody2D" parent="."]
position = Vector2(247, 81)
script = SubResource("GDScript_aqk2v")
item_path = NodePath("../Item")
goal_path = NodePath("../Goal")

[node name="Sprite2D" type="Sprite2D" parent="Bot"]
position = Vector2(20, 14)
texture = ExtResource("1_fj7yv")

[node name="Item" type="Node2D" parent="."]
position = Vector2(187, 485)

[node name="Sprite2D" type="Sprite2D" parent="Item"]
position = Vector2(26, 21)
scale = Vector2(0.11363649, 0.11731634)
texture = ExtResource("2_tlwt5")

[node name="Goal" type="Node2D" parent="."]
position = Vector2(861, 250)

[node name="Sprite2D" type="Sprite2D" parent="Goal"]
position = Vector2(13, 15)
scale = Vector2(0.18164065, 0.16992185)
texture = ExtResource("3_tlwt5")
